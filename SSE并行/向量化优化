#include<iostream>
#include<arm_neon.h>
#include<time.h>
#include<windows.h>
#include <intrin.h>
using namespace std;
void init(int n)
{
    int row = n;
        srand(time(NULL));
        float**Matrix = new float* [row + 1];
        for (int i = 0; i < row; i++)
        {
            Matrix[i] = new float[row + 1];
            for (int j = 0; j < row; j++)
                Matrix[i][j] = rand() % 100;
        }
}
int main()
{
    
	float matrix[1000][1000] = { 0 };
    int row = 12;
    for (int k = 0; k < row; k++)
    {
        float __declspec(align(16)) temp[4] = { matrix[k][k], matrix[k][k], matrix[k][k], matrix[k][k] };
        __m128  t1;
        t1=_mm_load_ps(temp);
        float mid = matrix[k][k];
        int end = row - 1;
        for(int j = row - 1; j % 4 != 3; j--)     
        {
            matrix[k][j] = matrix[k][j] / mid;
            end = j;
        }
        for(int j = end - 3; j % 4 == 0 && j >= k + 1; j -= 4)
        {
                __m128 t2=_mm_load_ps(matrix[k] + j);
                __m128 t3=_mm_div_ps(t2, t1);
                _mm_store_ps(matrix[k] + j, t3);
                end = j;
         }

        for (int j = k + 1; j < end; j++)
            matrix[k][j] = matrix[k][j] / mid;
            matrix[k][k] = 1.0;

        for (int i = k + 1; i < row; i++)
        {
            float __declspec(align(16)) temp1[4] = { matrix[i][k], matrix[i][k], matrix[i][k], matrix[i][k] };
            t1 = _mm_load_ps(temp1);

            int end1 = row - 1;
            for (int j = row - 1; j % 4 != 3; j--)    
            {
                matrix[i][j] -= matrix[i][k] * matrix[k][j];
                end1 = j;
            }//处理中间的对齐的部分
                for(int j = end1 - 3; j % 4 == 0 && j >= k + 1; j -= 4)
                {
                    __m128 t2 = _mm_load_ps(matrix[i] + j);
                    __m128 t3 = _mm_load_ps(matrix[k] + j);
                    __m128 t4 = _mm_sub_ps(t2, _mm_mul_ps(t1, t3));
                    _mm_store_ps(matrix[i] + j, t4);
                    end1 = j;
                }

            for (int j = k + 1; j < end1; j++)  //处理最终的end1前面的部分
            {
                matrix[i][j] -= matrix[i][k] * matrix[k][j];
            }

            matrix[i][k] = 0;
        }
    }
	return 0;

}
